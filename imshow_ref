import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load the image
image_ref = r"C:\Users\Asus\Desktop\LAB_TEST\REF\REF3.png"
image = cv2.imread(image_ref, 1)

# Convert to grayscale
gray_dot1 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Define red color boundaries in BGR format
#lower = [1, 0, 20]
#upper = [60, 40, 220]

# Create NumPy arrays from the boundaries
#lower = np.array(lower, dtype="uint8")
#upper = np.array(upper, dtype="uint8")

# Create the mask and apply it
#mask = cv2.inRange(image, lower, upper)
#output = cv2.bitwise_and(image, image, mask=mask)

# Apply threshold
ret, thresh1 = cv2.threshold(gray_dot1, 150, 200, cv2.THRESH_BINARY)

# Find contours
contours1, _ = cv2.findContours(thresh1, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

if len(contours1) > 0:
    # Draw all contours in blue
    #cv2.drawContours(gray_dot1, contours1, -1, (255, 0, 0), 3)

    # Find the biggest contour by area
    c = max(contours1, key=cv2.contourArea)

    # Get bounding box coordinates
    x_ref, y_ref, w_ref, h_ref = cv2.boundingRect(c)

    print('w_ref = ', w_ref)
    print('h_ref = ', h_ref)
    print('x_ref = ', x_ref)
    print('y_ref = ', y_ref)

    # Create a mask with the largest contour
    mask1 = np.zeros_like(gray_dot1)
    cv2.drawContours(mask1, [c], -1, 255, thickness=-1)
    
    # Display the mask
    plt.imshow(mask1, cmap='gray')
    plt.show()

